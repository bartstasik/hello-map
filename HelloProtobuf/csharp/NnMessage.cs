// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: nn_message.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Neuralnet {

  /// <summary>Holder for reflection information generated from nn_message.proto</summary>
  public static partial class NnMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for nn_message.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NnMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBubl9tZXNzYWdlLnByb3RvEgluZXVyYWxuZXQaH2dvb2dsZS9wcm90b2J1",
            "Zi90aW1lc3RhbXAucHJvdG8i6wEKDU1vdmVtZW50SW5wdXQSEAoIcm90YXRp",
            "b24YASABKAESEAoIbm9ydGhSYXkYAiABKAESFAoMbm9ydGh3ZXN0UmF5GAMg",
            "ASgBEhQKDG5vcnRoZWFzdFJheRgEIAEoARIPCgdlYXN0UmF5GAUgASgBEhAK",
            "CHNvdXRoUmF5GAYgASgBEg8KB3dlc3RSYXkYByABKAESEgoKZG9vckNsb3Nl",
            "ZBgIIAEoCBIVCg1jaGVja3BvaW50TWV0GAkgASgFEhoKEmRpc3RhbmNlRnJv",
            "bVBsYXllchgKIAEoARIPCgdzZWVzS2V5GAsgASgIIrEBCg5Nb3ZlbWVudE91",
            "dHB1dBIVCg1tb3VzZVJvdGF0aW9uGAEgASgBEhwKFGZvcndhcmRCdXR0b25Q",
            "cmVzc2VkGAIgASgIEhkKEWJhY2tCdXR0b25QcmVzc2VkGAMgASgIEhkKEWxl",
            "ZnRCdXR0b25QcmVzc2VkGAQgASgIEhoKEnJpZ2h0QnV0dG9uUHJlc3NlZBgF",
            "IAEoCBIYChBrZXlCdXR0b25QcmVzc2VkGAYgASgIYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Neuralnet.MovementInput), global::Neuralnet.MovementInput.Parser, new[]{ "Rotation", "NorthRay", "NorthwestRay", "NortheastRay", "EastRay", "SouthRay", "WestRay", "DoorClosed", "CheckpointMet", "DistanceFromPlayer", "SeesKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Neuralnet.MovementOutput), global::Neuralnet.MovementOutput.Parser, new[]{ "MouseRotation", "ForwardButtonPressed", "BackButtonPressed", "LeftButtonPressed", "RightButtonPressed", "KeyButtonPressed" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MovementInput : pb::IMessage<MovementInput> {
    private static readonly pb::MessageParser<MovementInput> _parser = new pb::MessageParser<MovementInput>(() => new MovementInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MovementInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Neuralnet.NnMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MovementInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MovementInput(MovementInput other) : this() {
      rotation_ = other.rotation_;
      northRay_ = other.northRay_;
      northwestRay_ = other.northwestRay_;
      northeastRay_ = other.northeastRay_;
      eastRay_ = other.eastRay_;
      southRay_ = other.southRay_;
      westRay_ = other.westRay_;
      doorClosed_ = other.doorClosed_;
      checkpointMet_ = other.checkpointMet_;
      distanceFromPlayer_ = other.distanceFromPlayer_;
      seesKey_ = other.seesKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MovementInput Clone() {
      return new MovementInput(this);
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 1;
    private double rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "northRay" field.</summary>
    public const int NorthRayFieldNumber = 2;
    private double northRay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double NorthRay {
      get { return northRay_; }
      set {
        northRay_ = value;
      }
    }

    /// <summary>Field number for the "northwestRay" field.</summary>
    public const int NorthwestRayFieldNumber = 3;
    private double northwestRay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double NorthwestRay {
      get { return northwestRay_; }
      set {
        northwestRay_ = value;
      }
    }

    /// <summary>Field number for the "northeastRay" field.</summary>
    public const int NortheastRayFieldNumber = 4;
    private double northeastRay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double NortheastRay {
      get { return northeastRay_; }
      set {
        northeastRay_ = value;
      }
    }

    /// <summary>Field number for the "eastRay" field.</summary>
    public const int EastRayFieldNumber = 5;
    private double eastRay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EastRay {
      get { return eastRay_; }
      set {
        eastRay_ = value;
      }
    }

    /// <summary>Field number for the "southRay" field.</summary>
    public const int SouthRayFieldNumber = 6;
    private double southRay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SouthRay {
      get { return southRay_; }
      set {
        southRay_ = value;
      }
    }

    /// <summary>Field number for the "westRay" field.</summary>
    public const int WestRayFieldNumber = 7;
    private double westRay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WestRay {
      get { return westRay_; }
      set {
        westRay_ = value;
      }
    }

    /// <summary>Field number for the "doorClosed" field.</summary>
    public const int DoorClosedFieldNumber = 8;
    private bool doorClosed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DoorClosed {
      get { return doorClosed_; }
      set {
        doorClosed_ = value;
      }
    }

    /// <summary>Field number for the "checkpointMet" field.</summary>
    public const int CheckpointMetFieldNumber = 9;
    private int checkpointMet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CheckpointMet {
      get { return checkpointMet_; }
      set {
        checkpointMet_ = value;
      }
    }

    /// <summary>Field number for the "distanceFromPlayer" field.</summary>
    public const int DistanceFromPlayerFieldNumber = 10;
    private double distanceFromPlayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DistanceFromPlayer {
      get { return distanceFromPlayer_; }
      set {
        distanceFromPlayer_ = value;
      }
    }

    /// <summary>Field number for the "seesKey" field.</summary>
    public const int SeesKeyFieldNumber = 11;
    private bool seesKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SeesKey {
      get { return seesKey_; }
      set {
        seesKey_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MovementInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MovementInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NorthRay, other.NorthRay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NorthwestRay, other.NorthwestRay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NortheastRay, other.NortheastRay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EastRay, other.EastRay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SouthRay, other.SouthRay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(WestRay, other.WestRay)) return false;
      if (DoorClosed != other.DoorClosed) return false;
      if (CheckpointMet != other.CheckpointMet) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DistanceFromPlayer, other.DistanceFromPlayer)) return false;
      if (SeesKey != other.SeesKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rotation != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Rotation);
      if (NorthRay != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NorthRay);
      if (NorthwestRay != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NorthwestRay);
      if (NortheastRay != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NortheastRay);
      if (EastRay != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EastRay);
      if (SouthRay != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SouthRay);
      if (WestRay != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(WestRay);
      if (DoorClosed != false) hash ^= DoorClosed.GetHashCode();
      if (CheckpointMet != 0) hash ^= CheckpointMet.GetHashCode();
      if (DistanceFromPlayer != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DistanceFromPlayer);
      if (SeesKey != false) hash ^= SeesKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rotation != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Rotation);
      }
      if (NorthRay != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(NorthRay);
      }
      if (NorthwestRay != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(NorthwestRay);
      }
      if (NortheastRay != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(NortheastRay);
      }
      if (EastRay != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(EastRay);
      }
      if (SouthRay != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(SouthRay);
      }
      if (WestRay != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(WestRay);
      }
      if (DoorClosed != false) {
        output.WriteRawTag(64);
        output.WriteBool(DoorClosed);
      }
      if (CheckpointMet != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CheckpointMet);
      }
      if (DistanceFromPlayer != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(DistanceFromPlayer);
      }
      if (SeesKey != false) {
        output.WriteRawTag(88);
        output.WriteBool(SeesKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rotation != 0D) {
        size += 1 + 8;
      }
      if (NorthRay != 0D) {
        size += 1 + 8;
      }
      if (NorthwestRay != 0D) {
        size += 1 + 8;
      }
      if (NortheastRay != 0D) {
        size += 1 + 8;
      }
      if (EastRay != 0D) {
        size += 1 + 8;
      }
      if (SouthRay != 0D) {
        size += 1 + 8;
      }
      if (WestRay != 0D) {
        size += 1 + 8;
      }
      if (DoorClosed != false) {
        size += 1 + 1;
      }
      if (CheckpointMet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CheckpointMet);
      }
      if (DistanceFromPlayer != 0D) {
        size += 1 + 8;
      }
      if (SeesKey != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MovementInput other) {
      if (other == null) {
        return;
      }
      if (other.Rotation != 0D) {
        Rotation = other.Rotation;
      }
      if (other.NorthRay != 0D) {
        NorthRay = other.NorthRay;
      }
      if (other.NorthwestRay != 0D) {
        NorthwestRay = other.NorthwestRay;
      }
      if (other.NortheastRay != 0D) {
        NortheastRay = other.NortheastRay;
      }
      if (other.EastRay != 0D) {
        EastRay = other.EastRay;
      }
      if (other.SouthRay != 0D) {
        SouthRay = other.SouthRay;
      }
      if (other.WestRay != 0D) {
        WestRay = other.WestRay;
      }
      if (other.DoorClosed != false) {
        DoorClosed = other.DoorClosed;
      }
      if (other.CheckpointMet != 0) {
        CheckpointMet = other.CheckpointMet;
      }
      if (other.DistanceFromPlayer != 0D) {
        DistanceFromPlayer = other.DistanceFromPlayer;
      }
      if (other.SeesKey != false) {
        SeesKey = other.SeesKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Rotation = input.ReadDouble();
            break;
          }
          case 17: {
            NorthRay = input.ReadDouble();
            break;
          }
          case 25: {
            NorthwestRay = input.ReadDouble();
            break;
          }
          case 33: {
            NortheastRay = input.ReadDouble();
            break;
          }
          case 41: {
            EastRay = input.ReadDouble();
            break;
          }
          case 49: {
            SouthRay = input.ReadDouble();
            break;
          }
          case 57: {
            WestRay = input.ReadDouble();
            break;
          }
          case 64: {
            DoorClosed = input.ReadBool();
            break;
          }
          case 72: {
            CheckpointMet = input.ReadInt32();
            break;
          }
          case 81: {
            DistanceFromPlayer = input.ReadDouble();
            break;
          }
          case 88: {
            SeesKey = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MovementOutput : pb::IMessage<MovementOutput> {
    private static readonly pb::MessageParser<MovementOutput> _parser = new pb::MessageParser<MovementOutput>(() => new MovementOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MovementOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Neuralnet.NnMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MovementOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MovementOutput(MovementOutput other) : this() {
      mouseRotation_ = other.mouseRotation_;
      forwardButtonPressed_ = other.forwardButtonPressed_;
      backButtonPressed_ = other.backButtonPressed_;
      leftButtonPressed_ = other.leftButtonPressed_;
      rightButtonPressed_ = other.rightButtonPressed_;
      keyButtonPressed_ = other.keyButtonPressed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MovementOutput Clone() {
      return new MovementOutput(this);
    }

    /// <summary>Field number for the "mouseRotation" field.</summary>
    public const int MouseRotationFieldNumber = 1;
    private double mouseRotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MouseRotation {
      get { return mouseRotation_; }
      set {
        mouseRotation_ = value;
      }
    }

    /// <summary>Field number for the "forwardButtonPressed" field.</summary>
    public const int ForwardButtonPressedFieldNumber = 2;
    private bool forwardButtonPressed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForwardButtonPressed {
      get { return forwardButtonPressed_; }
      set {
        forwardButtonPressed_ = value;
      }
    }

    /// <summary>Field number for the "backButtonPressed" field.</summary>
    public const int BackButtonPressedFieldNumber = 3;
    private bool backButtonPressed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BackButtonPressed {
      get { return backButtonPressed_; }
      set {
        backButtonPressed_ = value;
      }
    }

    /// <summary>Field number for the "leftButtonPressed" field.</summary>
    public const int LeftButtonPressedFieldNumber = 4;
    private bool leftButtonPressed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LeftButtonPressed {
      get { return leftButtonPressed_; }
      set {
        leftButtonPressed_ = value;
      }
    }

    /// <summary>Field number for the "rightButtonPressed" field.</summary>
    public const int RightButtonPressedFieldNumber = 5;
    private bool rightButtonPressed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RightButtonPressed {
      get { return rightButtonPressed_; }
      set {
        rightButtonPressed_ = value;
      }
    }

    /// <summary>Field number for the "keyButtonPressed" field.</summary>
    public const int KeyButtonPressedFieldNumber = 6;
    private bool keyButtonPressed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool KeyButtonPressed {
      get { return keyButtonPressed_; }
      set {
        keyButtonPressed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MovementOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MovementOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MouseRotation, other.MouseRotation)) return false;
      if (ForwardButtonPressed != other.ForwardButtonPressed) return false;
      if (BackButtonPressed != other.BackButtonPressed) return false;
      if (LeftButtonPressed != other.LeftButtonPressed) return false;
      if (RightButtonPressed != other.RightButtonPressed) return false;
      if (KeyButtonPressed != other.KeyButtonPressed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MouseRotation != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MouseRotation);
      if (ForwardButtonPressed != false) hash ^= ForwardButtonPressed.GetHashCode();
      if (BackButtonPressed != false) hash ^= BackButtonPressed.GetHashCode();
      if (LeftButtonPressed != false) hash ^= LeftButtonPressed.GetHashCode();
      if (RightButtonPressed != false) hash ^= RightButtonPressed.GetHashCode();
      if (KeyButtonPressed != false) hash ^= KeyButtonPressed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MouseRotation != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(MouseRotation);
      }
      if (ForwardButtonPressed != false) {
        output.WriteRawTag(16);
        output.WriteBool(ForwardButtonPressed);
      }
      if (BackButtonPressed != false) {
        output.WriteRawTag(24);
        output.WriteBool(BackButtonPressed);
      }
      if (LeftButtonPressed != false) {
        output.WriteRawTag(32);
        output.WriteBool(LeftButtonPressed);
      }
      if (RightButtonPressed != false) {
        output.WriteRawTag(40);
        output.WriteBool(RightButtonPressed);
      }
      if (KeyButtonPressed != false) {
        output.WriteRawTag(48);
        output.WriteBool(KeyButtonPressed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MouseRotation != 0D) {
        size += 1 + 8;
      }
      if (ForwardButtonPressed != false) {
        size += 1 + 1;
      }
      if (BackButtonPressed != false) {
        size += 1 + 1;
      }
      if (LeftButtonPressed != false) {
        size += 1 + 1;
      }
      if (RightButtonPressed != false) {
        size += 1 + 1;
      }
      if (KeyButtonPressed != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MovementOutput other) {
      if (other == null) {
        return;
      }
      if (other.MouseRotation != 0D) {
        MouseRotation = other.MouseRotation;
      }
      if (other.ForwardButtonPressed != false) {
        ForwardButtonPressed = other.ForwardButtonPressed;
      }
      if (other.BackButtonPressed != false) {
        BackButtonPressed = other.BackButtonPressed;
      }
      if (other.LeftButtonPressed != false) {
        LeftButtonPressed = other.LeftButtonPressed;
      }
      if (other.RightButtonPressed != false) {
        RightButtonPressed = other.RightButtonPressed;
      }
      if (other.KeyButtonPressed != false) {
        KeyButtonPressed = other.KeyButtonPressed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            MouseRotation = input.ReadDouble();
            break;
          }
          case 16: {
            ForwardButtonPressed = input.ReadBool();
            break;
          }
          case 24: {
            BackButtonPressed = input.ReadBool();
            break;
          }
          case 32: {
            LeftButtonPressed = input.ReadBool();
            break;
          }
          case 40: {
            RightButtonPressed = input.ReadBool();
            break;
          }
          case 48: {
            KeyButtonPressed = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
